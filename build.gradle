buildscript {
    ext.repos = {
        mavenLocal()
        mavenCentral()
        google()
    }

    repositories repos
}


plugins {
    id 'com.github.ben-manes.versions' version '0.46.0' apply false
    id 'org.owasp.dependencycheck' version '8.2.1' apply false
    id "com.github.spotbugs" version "4.7.1" apply false
    id "org.sonarqube" version "4.0.0.2929"
    id 'com.diffplug.spotless' version '6.2.0' apply false
}

// Split projects into buildable: examples and libraries. 
// This omits 'wrapper' directories. See also settings.gradle
 
def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def exampleProjects() {
    buildProjects().findAll { it.name.endsWith("-example") }
}

def libraryProjects() {
    buildProjects().findAll { !exampleProjects().contains(it) }
}

ext {
    junitJupiterVersion = '5.9.3'
    mockitoVersion = '5.3.1'
    logbackLogstashVersion = '7.3'
    slf4jVersion = '2.0.7'
    googleTruthVersion = '1.1.3'
    logbackVersion = '1.4.7'
    jacksonVersion = '2.15.0'
    jacksonDatabindVersion = '2.15.0'
    nettyTcnativeBoringsslStaticVersion = '2.0.61.Final'
    nettyVersion = '4.1.92.Final'

    commonsIoVersion = '2.11.0'
    grpcNettyVersion = '1.55.1'
    grpcVersion = '1.55.1'
    grpcCommonsVersion = '2.17.0'
    grpcProtobufVersion = '3.22.4'
    jsonAssertVersion = '0.6.2'
    jsonPathVersion = '2.8.0'
    jsonSmartVersion = '2.4.10'
}

ext.commonDependencies = {
    // JUnit Jupiter API and TestEngine implementation
    testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")

    testImplementation("org.mockito:mockito-core:${mockitoVersion}")

    testImplementation("com.google.truth:truth:${googleTruthVersion}")
    testImplementation("com.google.truth.extensions:truth-java8-extension:${googleTruthVersion}")
}

configure(buildProjects()) {

    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.spotbugs'

    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        effort = 'max'
        reportLevel = 'high'
        maxHeapSize = '1g'
        reportsDir = file("$buildDir/spotbugs")
        excludeFilter = rootProject.file("spotbugs-exclude.xml")
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

configure(exampleProjects()) {
    apply plugin: 'java'

    dependencies commonDependencies

    tasks.compileTestJava { dependsOn("generateTestProto") }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
}

// projects which should be published
configure(libraryProjects()) {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        withJavadocJar()
        withSourcesJar()
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }
    }

    dependencies commonDependencies

    tasks.compileTestJava { dependsOn("generateTestProto") }

    afterEvaluate {
        publishing {
            publications {
                // Creates a Maven publication called "release".
                release(MavenPublication) {
                    // Applies the component for the release build variant.
                    from components.java

                    groupId "$groupId"
                    artifactId "$project.ext.artifactId"
                    version = "$version"

                    pom {
                        name = "$project.name"
                        description = 'GRPC Logging library'
                        url = 'https://github.com/entur/grpc-logging'
                        packaging = 'jar'
                        inceptionYear = '2022'
                        licenses {
                            license {
                                name = 'European Union Public Licence v1.2'
                                url = 'https://www.eupl.eu/'
                                distribution = 'repo'
                            }
                        }
                        developers {
                            developer {
                                id = "skjolber"
                                name = "Thomas Skj√∏lberg"
                                email = "thomas.rorvik.skjolberg@entur.org"
                            }
                        }
                        scm {
                            url = 'https://github.com/entur/grpc-logging'
                            connection = 'git@github.com:entur/grpc-logging.git'
                        }
                    }
                }
            }
            if(project.hasProperty("signing.gnupg.keyName")) {
                signing {
                    useGpgCmd()

                    // set
                    // signing.gnupg.keyName=xxx
                    // signing.gnupg.passphrase=yyy
                    // via command line

                    sign publishing.publications.release
                }
            }
        }

    }

}
 
allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.owasp.dependencycheck'

    // OWASP Dependency Check settings
    dependencyCheck {
        analyzedTypes = ['jar'] // the default artifact types that will be analyzed.
        format = 'ALL'
        failBuildOnCVSS = 7
        // Specifies if the build should be failed if a CVSS score equal to or above a specified level is identified.
        suppressionFiles = ["$projectDir/dependencycheck-base-suppression.xml", "$rootDir/dependencycheck-root-suppression.xml"]
        // specify a list of known issues which contain false-positives
        scanConfigurations = configurations.findAll {
            (!it.name.startsWithAny('androidTest', 'test', 'debug', 'lint', 'kapt', 'spotbugs') && !it.name.contains("AndroidTest") && !it.name.contains("Test") && !it.name.contains("AnnotationProcessor"))
        }.collect {
            it.name
        }
    }

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories repos

}

gradle.projectsEvaluated {
    // do not scan testing tools and so on, see https://medium.com/@appmattus/android-security-scanning-your-app-for-known-vulnerabilities-421384603fc5
    // note: must be set after project is evaluated, as Android creates configurations based on the build types
    dependencyCheck {
        scanConfigurations = configurations.findAll {
            (!it.name.startsWithAny('androidTest', 'test', 'debug', 'lint', 'kapt') && !it.name.contains("AndroidTest") && !it.name.contains("Test") && !it.name.contains("AnnotationProcessor"))
        }.collect {
            it.name
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

}


